# Copyright (c) 2021 by xfangfang. All Rights Reserved.


name: Build Macast

on:
  push:
    branches:
      - dev_test

jobs:
  release:
    needs: [ build-amd64 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v4

      - name: Version
        run: |
          ls -R
          export VERSION=`cat macast/.version`
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "DIST_DMG=Macast-MacOS-v${VERSION}.dmg" >> $GITHUB_ENV
          echo "DIST_EXE=Macast-Windows-v${VERSION}.exe" >> $GITHUB_ENV
          echo "DIST_EXE_DEBUG=Macast-Windows-v${VERSION}-debug.exe" >> $GITHUB_ENV
          echo "DIST_AMD64=Macast-Linux-v${VERSION}-amd64" >> $GITHUB_ENV
          echo "DIST_AMD64_DEB=Macast-Linux-v${VERSION}-amd64.deb" >> $GITHUB_ENV
          echo "DIST_ARMV7=Macast-Linux-v${VERSION}-armv7" >> $GITHUB_ENV
          echo "DIST_ARMV7_DEB=Macast-Linux-v${VERSION}-armv7.deb" >> $GITHUB_ENV
          echo $GITHUB_ENV

      - name: Upload
        if: github.event.inputs.release == 'true' && github.event.inputs.release  != 'false' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: Macast ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          omitBodyDuringUpdate: true
          body: This release is built by github-action.
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.DIST_DMG }}/${{ env.DIST_DMG }},${{ env.DIST_EXE }}/${{ env.DIST_EXE }},${{ env.DIST_EXE_DEBUG }}/${{ env.DIST_EXE_DEBUG }},${{ env.DIST_AMD64 }}/${{ env.DIST_AMD64 }},${{ env.DIST_AMD64_DEB }}/${{ env.DIST_AMD64_DEB }},${{ env.DIST_ARMV7_DEB }}/${{ env.DIST_ARMV7_DEB }}

  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Requirement
        run: |
          sudo apt update
          sudo apt install -y gettext
          docker pull xfangfang/build-macast

      - name: Build
        id: compile
        run: |
          for file in i18n/*; do msgfmt -o $file/LC_MESSAGES/macast.mo $file/LC_MESSAGES/macast.po;echo $file;done
          export VERSION=`cat macast/.version`
          export DIST_AMD64_DEB=Macast-Linux-v${VERSION}-MPV0.38-amd64.deb
          export DIST_AMD64=Macast-Linux-v${VERSION}-amd64
          echo "DIST_AMD64_DEB=${DIST_AMD64_DEB}" >> $GITHUB_ENV
          echo "DIST_AMD64=${DIST_AMD64}" >> $GITHUB_ENV
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          docker run --rm -v "$(pwd):/src/" xfangfang/build-macast \
              'pip install -r requirements/common.txt && \
              pip install -U pyinstaller && \
              pyinstaller --noconfirm -F -w \
                --additional-hooks-dir=. \
                --add-data="macast/.version:." \
                --add-data="macast/xml/*:macast/xml" \
                --add-data="i18n/zh_CN/LC_MESSAGES/*.mo:i18n/zh_CN/LC_MESSAGES" \
                --add-data="macast/assets/*:macast/assets" \
                --add-data="macast/assets/fonts/*:macast/assets/fonts" \
                --exclude-module=tkinter \
                --distpath="app" \
              Macast.py'
          sudo chown 1000 app/Macast
          cp app/Macast $DIST_AMD64
          #build deb
          mkdir -p dist/DEBIAN
          mkdir -p dist/usr/bin
          mkdir -p dist/usr/share/applications
          mkdir -p dist/usr/share/icons
          echo -e "Package: Macast\nVersion: ${VERSION}\nArchitecture: amd64\nMaintainer: xfangfang\nDescription: DLNA Media Renderer\nDepends: mpv" > dist/DEBIAN/control
          echo -e "[Desktop Entry]\nName=Macast\nComment=DLNA Media Renderer\nExec=/usr/bin/macast\nIcon=/usr/share/icons/Macast.png\nTerminal=false\nType=Application\nCategories=Video" > dist/usr/share/applications/macast.desktop
          cp app/Macast dist/usr/bin/macast
          cp macast/assets/icon.png dist/usr/share/icons/Macast.png
          dpkg -b dist $DIST_AMD64_DEB
          echo "::set-output name=status::success"

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_ubuntu == 'true' && github.event.inputs.ssh_ubuntu  != 'false') || contains(github.event.action, 'ssh_ubuntu')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Upload dist linux x64
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_AMD64 }}
          path: ${{ env.DIST_AMD64 }}

      - name: Upload dist deb
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_AMD64_DEB }}
          path: ${{ env.DIST_AMD64_DEB }}
